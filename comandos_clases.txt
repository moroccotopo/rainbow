    1  awk -F'|' '\nNR==1 {\n    # Store the column names in an array\n    split($0, columns, "|");\n    colList = "(";\n    for (i = 1; i <= length(columns); i++) {\n        colList = colList columns[i];\n        if (i < length(columns)) colList = colList ", ";\n    }\n    colList = colList ")";  # Close the parentheses\n        # Store the column names in an array\n    split($0, columns, "|");\n    \n    # Start building the CREATE TABLE statement\n    createTable = "CREATE TABLE ticdata2000 (";\n    for (i = 1; i <= length(columns); i++) {\n        createTable = createTable columns[i] " TEXT";  # Use TEXT type for all columns\n        if (i < length(columns)) createTable = createTable ", ";\n    }\n    \n    # Add foreign key constraints\n    createTable = createTable ", " \\n        "FOREIGN KEY (MOSTYPE) REFERENCES cat1(MOSTYPE), " \\n        "FOREIGN KEY (MGEMLEEF) REFERENCES cat2(MGEMLEEF), " \\n        "FOREIGN KEY (MOSHOOFD) REFERENCES cat3(MOSHOOFD), " \\n        "FOREIGN KEY (MGODRK) REFERENCES cat4(MGODRK), " \\n        "FOREIGN KEY (PWAPART) REFERENCES cat5(PWAPART)";\n    \n    createTable = createTable ");";  # Close the CREATE TABLE statement\n    print createTable;  # Print the CREATE TABLE statement\n    next;  # Move to the next line\n\n}\n{\n    # Construct the SQL INSERT statement\n    sql = "INSERT INTO ticdata2000 " colList " VALUES (";\n    for (i = 1; i <= NF; i++) {\n        sql = sql $i;\n        if (i < NF) sql = sql ", ";\n    }\n    sql = sql ");";  # Close the values and the statement\n    print sql;  # Output the SQL statement\n}' ticdata2000_h.txt > ticdatasql.sql
    2  sqlite3 tarea2.db < ticdatasql.sql\n
    3  sqlite3 tarea2.db\n
    4  awk -F'|' '\nNR==1 {\n    # Store the column names in an array\n    split($0, columns, "|");\n    colList = "(";\n    for (i = 1; i <= length(columns); i++) {\n        colList = colList columns[i];\n        if (i < length(columns)) colList = colList ", ";\n    }\n    colList = colList ")";  # Close the parentheses\n        # Store the column names in an array\n    split($0, columns, "|");\n    \n    # Start building the CREATE TABLE statement\n    createTable = "CREATE TABLE ticdata2000 (";\n    for (i = 1; i <= length(columns); i++) {\n        createTable = createTable columns[i] " TEXT";  # Use TEXT type for all columns\n        if (i < length(columns)) createTable = createTable ", ";\n    }\n    \n    # Add foreign key constraints\n    createTable = createTable ", " \\n        "FOREIGN KEY (MOSTYPE) REFERENCES cat1(MOSTYPE), " \\n        "FOREIGN KEY (MGEMLEEF) REFERENCES cat2(MGEMLEEF), " \\n        "FOREIGN KEY (MOSHOOFD) REFERENCES cat3(MOSHOOFD), " \\n        "FOREIGN KEY (MGODRK) REFERENCES cat4(MGODRK), " \\n        "FOREIGN KEY (PWAPART) REFERENCES cat5(PWAPART)";\n    \n    createTable = createTable ");";  # Close the CREATE TABLE statement\n    print createTable;  # Print the CREATE TABLE statement\n    next;  # Move to the next line\n\n}\n{\n    # Construct the SQL INSERT statement\n    sql = "INSERT INTO ticdata2000 " colList " VALUES (";\n    for (i = 1; i <= NF; i++) {\n        sql = sql '$i';\n        if (i < NF) sql = sql ", ";\n    }\n    sql = sql ");";  # Close the values and the statement\n    print sql;  # Output the SQL statement\n}' ticdata2000_h.txt > ticdatasql.sql
    5  awk -F'|' '\nNR==1 {\n    # Store the column names in an array\n    split($0, columns, "|");\n    colList = "(";\n    for (i = 1; i <= length(columns); i++) {\n        colList = colList columns[i];\n        if (i < length(columns)) colList = colList ", ";\n    }\n    colList = colList ")";  # Close the parentheses\n        # Store the column names in an array\n    split($0, columns, "|");\n    \n    # Start building the CREATE TABLE statement\n    createTable = "CREATE TABLE ticdata2000 (";\n    for (i = 1; i <= length(columns); i++) {\n        createTable = createTable columns[i] " TEXT";  # Use TEXT type for all columns\n        if (i < length(columns)) createTable = createTable ", ";\n    }\n    \n    # Add foreign key constraints\n    createTable = createTable ", " \\n        "FOREIGN KEY (MOSTYPE) REFERENCES cat1(MOSTYPE), " \\n        "FOREIGN KEY (MGEMLEEF) REFERENCES cat2(MGEMLEEF), " \\n        "FOREIGN KEY (MOSHOOFD) REFERENCES cat3(MOSHOOFD), " \\n        "FOREIGN KEY (MGODRK) REFERENCES cat4(MGODRK), " \\n        "FOREIGN KEY (PWAPART) REFERENCES cat5(PWAPART)";\n    \n    createTable = createTable ");";  # Close the CREATE TABLE statement\n    print createTable;  # Print the CREATE TABLE statement\n    next;  # Move to the next line\n\n}\n{\n    # Construct the SQL INSERT statement\n    sql = "INSERT INTO ticdata2000 " colList " VALUES (";\n    for (i = 1; i <= NF; i++) {\n        sql = sql '$i';\n        if (i < NF) sql = sql ", ";\n    }\n    sql = sql ");";  # Close the values and the statement\n    print sql;  # Output the SQL statement\n}' ticdata2000_h.txt > ticdatasql.sq
    6  ls
    7  cd /data
    8  ls
    9  cd encoding
   10  awk -F'|' '\nNR==1 {\n    # Store the column names in an array\n    split($0, columns, "|");\n    colList = "(";\n    for (i = 1; i <= length(columns); i++) {\n        colList = colList columns[i];\n        if (i < length(columns)) colList = colList ", ";\n    }\n    colList = colList ")";  # Close the parentheses\n        # Store the column names in an array\n    split($0, columns, "|");\n    \n    # Start building the CREATE TABLE statement\n    createTable = "CREATE TABLE ticdata2000 (";\n    for (i = 1; i <= length(columns); i++) {\n        createTable = createTable columns[i] " TEXT";  # Use TEXT type for all columns\n        if (i < length(columns)) createTable = createTable ", ";\n    }\n    \n    # Add foreign key constraints\n    createTable = createTable ", " \\n        "FOREIGN KEY (MOSTYPE) REFERENCES cat1(MOSTYPE), " \\n        "FOREIGN KEY (MGEMLEEF) REFERENCES cat2(MGEMLEEF), " \\n        "FOREIGN KEY (MOSHOOFD) REFERENCES cat3(MOSHOOFD), " \\n        "FOREIGN KEY (MGODRK) REFERENCES cat4(MGODRK), " \\n        "FOREIGN KEY (PWAPART) REFERENCES cat5(PWAPART)";\n    \n    createTable = createTable ");";  # Close the CREATE TABLE statement\n    print createTable;  # Print the CREATE TABLE statement\n    next;  # Move to the next line\n\n}\n{\n    # Construct the SQL INSERT statement\n    sql = "INSERT INTO ticdata2000 " colList " VALUES (";\n    for (i = 1; i <= NF; i++) {\n        sql = sql '$i';\n        if (i < NF) sql = sql ", ";\n    }\n    sql = sql ");";  # Close the values and the statement\n    print sql;  # Output the SQL statement\n}' ticdata2000_h.txt > ticdatasql.sq
   11  sqlite3 tarea2.db < ticdatasql.sql\n
   12  sqlite3 tarea2.db
   13  {\n    echo 'CREATE TABLE cat1 (mostype TEXT PIMARY KEY, mostypecat TEXT);'\n    awk 'NR >= 208 && NR <= 248 { printf "INSERT INTO cat1 (mostype, mostypecat) VALUES (\"%s\", \"%s\");\n", $2, $3 }' TicDataDescr.txt\n} > catalogo1.sql\n\nsqlite3 tarea2.db < catalogo1.sql
   14  sqlite3 tarea2.db
   15  clear
   16  {\n    echo 'CREATE TABLE cat2 (MGEMLEEF TEXT PIMARY KEY, MGEMLEEFCAT TEXT);'\n    awk 'NR >= 251 && NR <= 265 { printf "INSERT INTO cat1 (MGEMLEEF, MGEMLEEFCAT) VALUES (\"%s\", \"%s\");\n", $2, $3 }' TicDataDescr.txt\n} > catalogo2.sql
   17  {\n    echo 'CREATE TABLE cat2 (MGEMLEEF TEXT PIMARY KEY, MGEMLEEFCAT TEXT);'\n    awk 'NR >= 251 && NR <= 265 { printf "INSERT INTO cat1 (MGEMLEEF, MGEMLEEFCAT) VALUES (\"%s\", \"%s\");\n", $1, $2 }' TicDataDescr.txt\n} > catalogo2.sql
   18  cat catalogo2.sql
   19  {\n    echo 'CREATE TABLE cat2 (MGEMLEEF TEXT PRIMARY KEY, MGEMLEEFCAT TEXT);'\n    awk 'NR >= 251 && NR <= 265 { \n        concatenated = $2 " " $3; \n        printf "INSERT INTO cat2 (MGEMLEEF, MGEMLEEFCAT) VALUES (\"%s\", \"%s\");\n", $1, concatenated; \n    }' TicDataDescr.txt\n} > catalogo2.sql
   20  cat catalogo2.sql
   21  {\n    echo 'CREATE TABLE cat2 (MGEMLEEF TEXT PRIMARY KEY, MGEMLEEFCAT TEXT);'\n    awk 'NR >= 251 && NR <= 265 && NF > 0  { \n        concatenated = $2 " " $3; \n        printf "INSERT INTO cat2 (MGEMLEEF, MGEMLEEFCAT) VALUES (\"%s\", \"%s\");\n", $1, concatenated; \n    }' TicDataDescr.txt\n} > catalogo2.sql\n
   22  cat catalogo2.sql
   23  {\n    echo 'CREATE TABLE cat2 (MGEMLEEF TEXT PIMARY KEY, MGEMLEEFCAT TEXT);'\n    awk 'NR >= 251 && NR <= 265 && NF > 0   { printf "INSERT INTO cat1 (MGEMLEEF, MGEMLEEFCAT) VALUES (\"%s\", \"%s\");\n", $1, $2 }' TicDataDescr.txt\n} > catalogo2.sql\n
   24  cat catalogo2.sql
   25  {\n    echo 'CREATE TABLE cat2 (MGEMLEEF TEXT PRIMARY KEY, MGEMLEEFCAT TEXT);'\n    awk 'NR >= 251 && NR <= 265 { \n        # Check if columns 2 and 3 are not empty\n        if ($2 != "" && $3 != "") {\n            # Concatenate columns 2 and 3 and assign it to MGEMLEEFCAT\n            concatenated = $2 " " $3; \n            printf "INSERT INTO cat2 (MGEMLEEF, MGEMLEEFCAT) VALUES (\"%s\", \"%s\");\n", $1, concatenated; \n        }\n    }' TicDataDescr.txt\n} > catalogo2.sql\n
   26  cat catalogo2.sql
   27  sqlite3 tarea2.db < catalogo2.sql
   28  sqlite3 tarea2.db 
   29  {\n    echo 'CREATE TABLE cat1 (MOSHOOFD TEXT PIMARY KEY, MOSHOOFDCAT TEXT);'\n    awk 'NR >= 268 && NR <= 286 { printf "INSERT INTO cat1 (MOSHOOFD, MOSHOOFDCAT) VALUES (\"%s\", \"%s\");\n", $2, $3 }' TicDataDescr.txt\n} > catalogo3.sql\n
   30  {\n    echo 'CREATE TABLE cat2 (MOSHOOFD TEXT PRIMARY KEY, MOSHOOFDCAT TEXT);'\n    awk 'NR >= 251 && NR <= 265 { \n        # Check if columns 2 and 3 are not empty\n        if ($2 != "" && $3 != "") {\n            # Concatenate columns 2 and 3 and assign it to MOSHOOFDCAT\n            concatenated = $2 " " $3; \n            printf "INSERT INTO cat2 (MOSHOOFD, MOSHOOFDCAT) VALUES (\"%s\", \"%s\");\n", $1, concatenated; \n        }\n    }' TicDataDescr.txt\n} > catalogo3.sql
   31  {\n    echo 'CREATE TABLE cat3 (MOSHOOFD TEXT PRIMARY KEY, MOSHOOFDCAT TEXT);'\n    awk 'NR >= 251 && NR <= 265 { \n        # Check if columns 2 and 3 are not empty\n        if ($2 != "" && $3 != "") {\n            # Concatenate columns 2 and 3 and assign it to MOSHOOFDCAT\n            concatenated = $2 " " $3; \n            printf "INSERT INTO cat3 (MOSHOOFD, MOSHOOFDCAT) VALUES (\"%s\", \"%s\");\n", $1, concatenated; \n        }\n    }' TicDataDescr.txt\n} > catalogo3.sql\n\n\n\nsqlite3 tarea2.db < catalogo3.sql
   32  sqlite3 tarea2.db
   33  {\n    echo 'CREATE TABLE cat4 (MGODRK TEXT PIMARY KEY, MGODRKCAT TEXT);'\n    awk 'NR >= 292 && NR <= 313 { printf "INSERT INTO cat1 (MGODRK, MGODRKCAT) VALUES (\"%s\", \"%s\");\n", $1, $2 }' TicDataDescr.txt\n} > catalogo4.sql
   34  {\n    echo 'CREATE TABLE cat4 (MGODRK TEXT PRIMARY KEY, MGODRKCAT TEXT);'\n    awk 'NR >= 292 && NR <= 313 { \n        # Check if columns 2 and 3 are not empty\n        if ($1 != "" && $2 != "") {\n            # Concatenate columns 2 and 3 and assign it to MGODRKCAT\n            concatenated = $2 " " $3; \n            printf "INSERT INTO cat3 (MGODRK, MGODRKCAT) VALUES (\"%s\", \"%s\");\n", $1, concatenated; \n        }\n    }' TicDataDescr.txt\n} > catalogo3.sql
   35  {\n    echo 'CREATE TABLE cat3 (MOSHOOFD TEXT PRIMARY KEY, MOSHOOFDCAT TEXT);'\n    awk 'NR >= 251 && NR <= 265 { \n\n        if ($1 != "" && $2 != "") {\n            # Concatenate columns 2 and 3 and assign it to MOSHOOFDCAT\n            concatenated = $2 " " $3; \n            printf "INSERT INTO cat3 (MOSHOOFD, MOSHOOFDCAT) VALUES (\"%s\", \"%s\");\n", $1, concatenated; \n        }\n    }' TicDataDescr.txt\n} > catalogo3.sql\n\n\n\nsqlite3 tarea2.db < catalogo3.sql
   36  {\n    echo 'CREATE TABLE cat4 (MGODRK TEXT PRIMARY KEY, MGODRKCAT TEXT);'\n    awk 'NR >= 292 && NR <= 313 { \n        # Check if columns 2 and 3 are not empty\n        if ($1 != "" && $2 != "") {\n            # Concatenate columns 2 and 3 and assign it to MGODRKCAT\n            concatenated = $2 " " $3; \n            printf "INSERT INTO cat3 (MGODRK, MGODRKCAT) VALUES (\"%s\", \"%s\");\n", $1, concatenated; \n        }\n    }' TicDataDescr.txt\n} > catalogo4.sql
   37  {\n    echo 'CREATE TABLE cat4 (MGODRK TEXT PRIMARY KEY, MGODRKCAT TEXT);'\n    awk 'NR >= 292 && NR <= 313 { \n        # Check if columns 2 and 3 are not empty\n        if ($1 != "" && $2 != "") {\n            # Concatenate columns 2 and 3 and assign it to MGODRKCAT\n            concatenated = $2 " " $3 " " $4; \n            printf "INSERT INTO cat3 (MGODRK, MGODRKCAT) VALUES (\"%s\", \"%s\");\n", $1, concatenated; \n        }\n    }' TicDataDescr.txt\n} > catalogo4.sql
   38  {\n    echo 'CREATE TABLE cat5 (PWAPART TEXT PRIMARY KEY, PWAPARTCAT TEXT);'\n    awk 'NR >= 316 && NR <= 335 { \n        # Check if columns 2 and 3 are not empty\n        if ($1 != "" && $2 != "") {\n            # Concatenate columns 2 and 3 and assign it to PWAPARTCAT\n            concatenated = $3 " " $4 " " $5; \n            printf "INSERT INTO cat3 (PWAPART, PWAPARTCAT) VALUES (\"%s\", \"%s\");\n", $1, concatenated; \n        }\n    }' TicDataDescr.txt\n} > catalogo5.sql\n
   39  sqlite3 tarea2.db < catalogo5.sql\n
   40  {\n    echo 'CREATE TABLE cat5 (PWAPART TEXT PRIMARY KEY, PWAPARTCAT TEXT);'\n    awk 'NR >= 316 && NR <= 335 { \n        # Check if columns 2 and 3 are not empty\n        if ($1 != "" && $2 != "") {\n            concatenated = $3 " " $4 " " $5; \n            printf "INSERT INTO cat3 (PWAPART, PWAPARTCAT) VALUES (\"%s\", \"%s\");\n", $1, concatenated; \n        }\n    }' TicDataDescr.txt\n} > catalogo5.sql
   41  {\n    echo 'CREATE TABLE cat4 (MGODRK TEXT PRIMARY KEY, MGODRKCAT TEXT);'\n    awk 'NR >= 292 && NR <= 313 { \n        # Check if columns 2 and 3 are not empty\n        if ($1 != "" && $2 != "") {\n            # Concatenate columns 2 and 3 and assign it to MGODRKCAT\n            concatenated = $2 " " $3 " " $4; \n            printf "INSERT INTO cat4 (MGODRK, MGODRKCAT) VALUES (\"%s\", \"%s\");\n", $1, concatenated; \n        }\n    }' TicDataDescr.txt\n} > catalogo4.sql\n\nsqlite3 tarea2.db < catalogo4.sql
   42  {\n    echo 'CREATE TABLE cat5 (PWAPART TEXT PRIMARY KEY, PWAPARTCAT TEXT);'\n    awk 'NR >= 316 && NR <= 335 { \n        # Check if columns 2 and 3 are not empty\n        if ($1 != "" && $2 != "") {\n            concatenated = $3 " " $4 " " $5; \n            printf "INSERT INTO cat5 (PWAPART, PWAPARTCAT) VALUES (\"%s\", \"%s\");\n", $1, concatenated; \n        }\n    }' TicDataDescr.txt\n} > catalogo5.sql\n\nsqlite3 tarea2.db < catalogo5.sql
   43  sqlite3 tarea2.db
   44  ls
   45  ./tarea02.sh
   46  chmod +x tarea02.sh
   47  ./tarea02.sh
   48  chmod +x tarea02.sh
   49  ./tarea02.sh
   50  \nawk -F'|' '\nNR==1 {\n    # Store the column names in an array\n    split($0, columns, "|");\n    colList = "(";\n    for (i = 1; i <= length(columns); i++) {\n        colList = colList columns[i];\n        if (i < length(columns)) colList = colList ", ";\n    }\n    colList = colList ")";  # Close the parentheses\n        # Store the column names in an array\n  \n  \n    # Start building the CREATE TABLE statement\n    createTable = "CREATE TABLE ticdata2000 (";\n    for (i = 1; i <= length(columns); i++) {\n        createTable = createTable columns[i] " TEXT";  # Use TEXT type for all columns\n        if (i < length(columns)) createTable = createTable ", ";\n    }\n    \n    # Add foreign key constraints\n    createTable = createTable ", " \\n        "FOREIGN KEY (MOSTYPE) REFERENCES cat1(MOSTYPE), " \\n        "FOREIGN KEY (MGEMLEEF) REFERENCES cat2(MGEMLEEF), " \\n        "FOREIGN KEY (MOSHOOFD) REFERENCES cat3(MOSHOOFD), " \\n        "FOREIGN KEY (MGODRK) REFERENCES cat4(MGODRK), " \\n        "FOREIGN KEY (PWAPART) REFERENCES cat5(PWAPART)";\n    \n    createTable = createTable ");";  # Close the CREATE TABLE statement\n    print createTable;  # Print the CREATE TABLE statement\n    next;  # Move to the next line\n\n}\n{\n    # Construct the SQL INSERT statement\n    sql = "INSERT INTO ticdata2000 " colList " VALUES (";\n    for (i = 1; i <= NF; i++) {\n        sql = sql '$i';\n        if (i < NF) sql = sql ", ";\n    }\n    sql = sql ");";  # Close the values and the statement\n    print sql;  # Output the SQL statement\n}' ticdata2000_h.txt > ticdatasql.sql
   51  awk -F'|' '\nNR==1 {\n    # Store the column names in an array\n    split($0, columns, "|");\n    colList = "(";\n    for (i = 1; i <= length(columns); i++) {\n        colList = colList columns[i];\n        if (i < length(columns)) colList = colList ", ";\n    }\n    colList = colList ")";  # Close the parentheses\n        # Store the column names in an array\n  \n  split($0, columns, "|");\n    # Start building the CREATE TABLE statement\n    createTable = "CREATE TABLE ticdata2000 (";\n    for (i = 1; i <= length(columns); i++) {\n        createTable = createTable columns[i] " TEXT";  # Use TEXT type for all columns\n        if (i < length(columns)) createTable = createTable ", ";\n    }\n    \n    # Add foreign key constraints\n    createTable = createTable ", " \\n        "FOREIGN KEY (MOSTYPE) REFERENCES cat1(MOSTYPE), " \\n        "FOREIGN KEY (MGEMLEEF) REFERENCES cat2(MGEMLEEF), " \\n        "FOREIGN KEY (MOSHOOFD) REFERENCES cat3(MOSHOOFD), " \\n        "FOREIGN KEY (MGODRK) REFERENCES cat4(MGODRK), " \\n        "FOREIGN KEY (PWAPART) REFERENCES cat5(PWAPART)";\n    \n    createTable = createTable ");";  # Close the CREATE TABLE statement\n    print createTable;  # Print the CREATE TABLE statement\n    next;  # Move to the next line\n\n}\n{\n    # Construct the SQL INSERT statement\n    sql = "INSERT INTO ticdata2000 " colList " VALUES (";\n    for (i = 1; i <= NF; i++) {\n        sql = sql '$i';\n        if (i < NF) sql = sql ", ";\n    }\n    sql = sql ");";  # Close the values and the statement\n    print sql;  # Output the SQL statement\n}' ticdata2000_h.txt > ticdatasql.sql
   52  awk -F'|' '\nNR==1 {\n    # Store the column names in an array\n    split($0, columns, "|");\n    colList = "(";\n    for (i = 1; i <= length(columns); i++) {\n        colList = colList columns[i];\n        if (i < length(columns)) colList = colList ", ";\n    }\n    colList = colList ")";  # Close the parentheses\n        # Store the column names in an array\n  \n  split($0, columns, "|");\n    # Start building the CREATE TABLE statement\n    createTable = "CREATE TABLE ticdata2000 (";\n    for (i = 1; i <= length(columns); i++) {\n        createTable = createTable columns[i] " TEXT";  # Use TEXT type for all columns\n        if (i < length(columns)) createTable = createTable ", ";\n    }\n    \n    # Add foreign key constraints\n    createTable = createTable ", " \\n        "FOREIGN KEY (MOSTYPE) REFERENCES cat1(MOSTYPE), " \\n        "FOREIGN KEY (MGEMLEEF) REFERENCES cat2(MGEMLEEF), " \\n        "FOREIGN KEY (MOSHOOFD) REFERENCES cat3(MOSHOOFD), " \\n        "FOREIGN KEY (MGODRK) REFERENCES cat4(MGODRK), " \\n        "FOREIGN KEY (PWAPART) REFERENCES cat5(PWAPART)";\n    \n    createTable = createTable ");";  # Close the CREATE TABLE statement\n    print createTable;  # Print the CREATE TABLE statement\n    next;  # Move to the next line\n\n}\n{\n    # Construct the SQL INSERT statement\n    sql = "INSERT INTO ticdata2000 " colList " VALUES (";\n    for (i = 1; i <= NF; i++) {\n        sql = sql $i;\n        if (i < NF) sql = sql ", ";\n    }\n    sql = sql ");";  # Close the values and the statement\n    print sql;  # Output the SQL statement\n}' ticdata2000_h.txt > ticdatasql.sql
   53  chmod +x tarea02.sh
   54  ./tarea02.sh
   55  chmod +x tarea02.sh
   56  ./tarea02.sh
   57  {\n    echo 'CREATE TABLE cat2 (MGEMLEEF TEXT PRIMARY KEY, MGEMLEEFCAT TEXT);'\n    awk 'NR >= 251 && NR <= 265 { \n        if ($1 != "" && $2 != "") {\n            # Concatenate columns 2 and 3 and assign it to MGEMLEEFCAT\n            concatenated = $2 " " $3; \n            printf "INSERT INTO cat2 (MGEMLEEF, MGEMLEEFCAT) VALUES (\"%s\", \"%s\");\n", $1, concatenated; \n        }\n    }' TicDataDescr.txt\n} > catalogo2.sql
   58  sqlite3 tarea02.db
   59  chmod +x tarea02.sh
   60  ./tarea02.sh
   61  chmod +x tarea02.sh
   62  ./tarea02.sh
   63  git version
   64  git config --global --list
   65  git init 
   66  git config --global --list
   67  git init 
   68  ls -al
   69  cd .git
   70  ls
   71  cd ..
   72  ls
   73  pwd
   74  cd ..
   75  mkdir rainbow
   76  cd rainbow
   77  git init 
   78  ls -al .git
   79  cat -git/config
   80  cat .git/config
   81  git config --global --list
   82  ls
   83  git config --global user.name "moroccotopo"
   84  git --global user.email "sr.armandorojas@gmail.com" 
   85  git config --global user.email "sr.armandorojas@gmail.com" 
   86  git config --global init.defualtBranch "main"
   87  git config --global --list
   88  ls -al .git
   89  git status
   90  history 1
